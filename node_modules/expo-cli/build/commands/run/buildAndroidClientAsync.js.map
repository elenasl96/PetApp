{"version":3,"sources":["../../../src/commands/run/buildAndroidClientAsync.ts"],"names":["capitalize","name","charAt","toUpperCase","slice","getGradleTask","buildVariant","buildAndroidClientAsync","projectRoot","options","devices","Android","getAllAvailableDevicesAsync","device","length","promptForDeviceAsync","bootedDevice","attemptToStartEmulatorOrAssertAsync","Log","log","androidProjectPath","AndroidConfig","Paths","getProjectPathOrThrowAsync","install","platforms","gradlew","path","join","process","platform","cwd","stdio","spinner","start","openProjectAsync","shouldPrompt","devClient","error","fail","succeed"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,SAASA,UAAT,CAAoBC,IAApB,EAAkC;AAChC,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAtC;AACD;;AAED,SAASC,aAAT,CAAuBC,YAAvB,EAAqD;AACnD,SAAQ,UAASN,UAAU,CAACM,YAAD,CAAe,EAA1C;AACD;;AAEc,eAAeC,uBAAf,CACbC,WADa,EAEbC,OAFa,EAGE;AACf,QAAMC,OAAO,GAAG,MAAMC,eAAQC,2BAAR,EAAtB;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,MAAR,GAAiB,CAAjB,GAAqB,MAAMH,eAAQI,oBAAR,CAA6BL,OAA7B,CAA3B,GAAmEA,OAAO,CAAC,CAAD,CAAzF;;AACA,MAAI,CAACG,MAAL,EAAa;AACX;AACD;;AACD,QAAMG,YAAY,GAAG,MAAML,eAAQM,mCAAR,CAA4CJ,MAA5C,CAA3B;;AACA,MAAI,CAACG,YAAL,EAAmB;AACjB;AACD;;AAEDE,iBAAIC,GAAJ,CAAQ,iBAAR;;AAEA,MAAIC,kBAAJ;;AACA,MAAI;AACFA,IAAAA,kBAAkB,GAAG,MAAMC,+BAAcC,KAAd,CAAoBC,0BAApB,CAA+Cf,WAA/C,CAA3B;AACD,GAFD,CAEE,gBAAM;AACN;AACA,UAAM,oCAAcA,WAAd,EAA2B;AAC/BgB,MAAAA,OAAO,EAAE,IADsB;AAE/BC,MAAAA,SAAS,EAAE,CAAC,SAAD;AAFoB,KAA3B,CAAN;AAIAL,IAAAA,kBAAkB,GAAG,MAAMC,+BAAcC,KAAd,CAAoBC,0BAApB,CAA+Cf,WAA/C,CAA3B;AACD;;AAED,QAAMkB,OAAO,GAAGC,gBAAKC,IAAL,CACdR,kBADc,EAEdS,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+B,aAA/B,GAA+C,SAFjC,CAAhB;;AAKA,QAAM,2BAAWJ,OAAX,EAAoB,CAACrB,aAAa,CAACI,OAAO,CAACH,YAAT,CAAd,CAApB,EAA2D;AAC/DyB,IAAAA,GAAG,EAAEX,kBAD0D;AAE/DY,IAAAA,KAAK,EAAE;AAFwD,GAA3D,CAAN;AAKA,QAAMC,OAAO,GAAG,oBAAI,oCAAJ,EAA0CC,KAA1C,EAAhB;;AACA,MAAI;AACF,UAAMvB,eAAQwB,gBAAR,CAAyB;AAC7B3B,MAAAA,WAD6B;AAE7B4B,MAAAA,YAAY,EAAE,KAFe;AAG7BC,MAAAA,SAAS,EAAE;AAHkB,KAAzB,CAAN;AAKD,GAND,CAME,OAAOC,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACM,IAAR;AACA,UAAMD,KAAN;AACD;;AAEDL,EAAAA,OAAO,CAACO,OAAR;AACD","sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\nimport spawnAsync from '@expo/spawn-async';\nimport ora from 'ora';\nimport path from 'path';\nimport { Android } from 'xdl';\n\nimport Log from '../../log';\nimport { prebuildAsync } from '../eject/prebuildAsync';\n\ntype Options = {\n  buildVariant: string;\n};\n\nfunction capitalize(name: string) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nfunction getGradleTask(buildVariant: string): string {\n  return `install${capitalize(buildVariant)}`;\n}\n\nexport default async function buildAndroidClientAsync(\n  projectRoot: string,\n  options: Options\n): Promise<void> {\n  const devices = await Android.getAllAvailableDevicesAsync();\n  const device = devices.length > 1 ? await Android.promptForDeviceAsync(devices) : devices[0];\n  if (!device) {\n    return;\n  }\n  const bootedDevice = await Android.attemptToStartEmulatorOrAssertAsync(device);\n  if (!bootedDevice) {\n    return;\n  }\n\n  Log.log('Building app...');\n\n  let androidProjectPath;\n  try {\n    androidProjectPath = await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  } catch {\n    // If the project doesn't have native code, prebuild it...\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['android'],\n    });\n    androidProjectPath = await AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);\n  }\n\n  const gradlew = path.join(\n    androidProjectPath,\n    process.platform === 'win32' ? 'gradlew.bat' : 'gradlew'\n  );\n\n  await spawnAsync(gradlew, [getGradleTask(options.buildVariant)], {\n    cwd: androidProjectPath,\n    stdio: 'inherit',\n  });\n\n  const spinner = ora('Starting the development client...').start();\n  try {\n    await Android.openProjectAsync({\n      projectRoot,\n      shouldPrompt: false,\n      devClient: true,\n    });\n  } catch (error) {\n    spinner.fail();\n    throw error;\n  }\n\n  spinner.succeed();\n}\n"],"file":"buildAndroidClientAsync.js"}