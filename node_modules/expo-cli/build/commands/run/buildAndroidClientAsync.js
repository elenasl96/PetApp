"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildAndroidClientAsync;

function _configPlugins() {
  const data = require("@expo/config-plugins");

  _configPlugins = function () {
    return data;
  };

  return data;
}

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _prebuildAsync() {
  const data = require("../eject/prebuildAsync");

  _prebuildAsync = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function capitalize(name) {
  return name.charAt(0).toUpperCase() + name.slice(1);
}

function getGradleTask(buildVariant) {
  return `install${capitalize(buildVariant)}`;
}

async function buildAndroidClientAsync(projectRoot, options) {
  const devices = await _xdl().Android.getAllAvailableDevicesAsync();
  const device = devices.length > 1 ? await _xdl().Android.promptForDeviceAsync(devices) : devices[0];

  if (!device) {
    return;
  }

  const bootedDevice = await _xdl().Android.attemptToStartEmulatorOrAssertAsync(device);

  if (!bootedDevice) {
    return;
  }

  _log().default.log('Building app...');

  let androidProjectPath;

  try {
    androidProjectPath = await _configPlugins().AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);
  } catch (_unused) {
    // If the project doesn't have native code, prebuild it...
    await (0, _prebuildAsync().prebuildAsync)(projectRoot, {
      install: true,
      platforms: ['android']
    });
    androidProjectPath = await _configPlugins().AndroidConfig.Paths.getProjectPathOrThrowAsync(projectRoot);
  }

  const gradlew = _path().default.join(androidProjectPath, process.platform === 'win32' ? 'gradlew.bat' : 'gradlew');

  await (0, _spawnAsync().default)(gradlew, [getGradleTask(options.buildVariant)], {
    cwd: androidProjectPath,
    stdio: 'inherit'
  });
  const spinner = (0, _ora().default)('Starting the development client...').start();

  try {
    await _xdl().Android.openProjectAsync({
      projectRoot,
      shouldPrompt: false,
      devClient: true
    });
  } catch (error) {
    spinner.fail();
    throw error;
  }

  spinner.succeed();
}
//# sourceMappingURL=buildAndroidClientAsync.js.map