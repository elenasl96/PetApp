{"version":3,"sources":["project/publishAsync.ts"],"names":["publishAsync","projectRoot","options","target","user","UserManager","ensureLoggedInAsync","console","log","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","XDLError","exp","pkg","hooks","isKernel","kind","validPostPublishHooks","bundles","useDevServer","androidBundle","android","code","iosBundle","ios","hasHooks","length","shouldPublishAndroidMaps","publishSourceMapPath","shouldPublishIosMaps","androidSourceMap","map","iosSourceMap","response","_uploadArtifactsAsync","e","serverError","Error","Sentry","captureException","androidManifest","iosManifest","publishManifestPath","EmbeddedAssets","shouldEmbedAssetsForExpoUpdates","Promise","all","ExponentTools","getManifestAsync","url","sdkVersion","releaseChannel","Accept","hookOptions","msg","logger","global","info","quiet","hook","file","warn","stack","fullManifestUrl","replace","configureAsync","iosManifestUrl","androidManifestUrl","_handleKernelPublishedAsync","formData","FormData","append","JSON","stringify","api","ApiV2","clientForUser","uploadFormDataAsync","kernelBundleUrl","scheme","host","port","username","slug","kernel","androidManifestPath","manifest","bundleUrl","fs","writeFile","path","resolve","iosManifestPath"],"mappings":"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","sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  getDefaultTarget,\n  HookArguments,\n  PackageJSONConfig,\n} from '@expo/config';\nimport FormData from 'form-data';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport Analytics from '../Analytics';\nimport ApiV2 from '../ApiV2';\nimport Config from '../Config';\nimport * as EmbeddedAssets from '../EmbeddedAssets';\nimport { isDebug, shouldUseDevServer } from '../Env';\nimport logger from '../Logger';\nimport { publishAssetsAsync } from '../ProjectAssets';\nimport * as Sentry from '../Sentry';\nimport UserManager, { User } from '../User';\nimport XDLError from '../XDLError';\nimport * as ExponentTools from '../detach/ExponentTools';\nimport * as Doctor from './Doctor';\nimport { createBundlesAsync, printBundleSizes } from './createBundlesAsync';\nimport { getPublishExpConfigAsync, PublishOptions } from './getPublishExpConfigAsync';\nimport { LoadedHook, prepareHooks, runHook } from './runHook';\n\nexport interface PublishedProjectResult {\n  /**\n   * Project manifest URL\n   */\n  url: string;\n  /**\n   * TODO: What is this?\n   */\n  ids: string[];\n  /**\n   * TODO: What is this? Where does it come from?\n   */\n  err?: string;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: PublishOptions = {}\n): Promise<PublishedProjectResult> {\n  options.target = options.target ?? getDefaultTarget(projectRoot);\n  const target = options.target;\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (isDebug()) {\n    console.log();\n    console.log('Publish Assets:');\n    console.log(`- Asset target: ${target}`);\n    console.log();\n  }\n\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  const { exp, pkg, hooks } = await getPublishExpConfigAsync(projectRoot, options);\n\n  // Exit early if kernel builds are created with robot users\n  if (exp.isKernel && user.kind === 'robot') {\n    throw new XDLError('ROBOT_ACCOUNT_ERROR', 'Kernel builds are not available for robot users');\n  }\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  const validPostPublishHooks: LoadedHook[] = prepareHooks(hooks, 'postPublish', projectRoot);\n  const bundles = await createBundlesAsync(projectRoot, options, {\n    useDevServer: shouldUseDevServer(exp),\n  });\n\n  printBundleSizes(bundles);\n\n  await publishAssetsAsync({ projectRoot, exp, bundles });\n\n  const androidBundle = bundles.android.code;\n  const iosBundle = bundles.ios.code;\n\n  const hasHooks = validPostPublishHooks.length > 0;\n\n  const shouldPublishAndroidMaps = !!exp.android?.publishSourceMapPath;\n  const shouldPublishIosMaps = !!exp.ios?.publishSourceMapPath;\n  const androidSourceMap = hasHooks || shouldPublishAndroidMaps ? bundles.android.map : null;\n  const iosSourceMap = hasHooks || shouldPublishIosMaps ? bundles.ios.map : null;\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app.json or app.config.js.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  let androidManifest = {};\n  let iosManifest = {};\n\n  if (\n    validPostPublishHooks.length ||\n    exp.ios?.publishManifestPath ||\n    exp.android?.publishManifestPath ||\n    EmbeddedAssets.shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)\n  ) {\n    [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions: Omit<HookArguments, 'config'> = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (const hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        runHook(hook, hookOptions);\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n  }\n\n  const fullManifestUrl = response.url.replace('exp://', 'https://');\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    releaseChannel: options.releaseChannel ?? 'default',\n    iosManifestUrl: fullManifestUrl,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: fullManifestUrl,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n\n  // TODO: move to postPublish hook\n  // This method throws early when a robot account is used for a kernel build\n  if (exp.isKernel && user.kind !== 'robot') {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({\n  exp,\n  iosBundle,\n  androidBundle,\n  options,\n  pkg,\n}: {\n  exp: ExpoConfig;\n  iosBundle: string;\n  androidBundle: string;\n  options: PublishOptions;\n  pkg: PackageJSONConfig;\n}) {\n  logger.global.info('');\n  logger.global.info('Uploading JavaScript bundles');\n  const formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n\n  return await api.uploadFormDataAsync('publish/new', formData);\n}\n\nasync function _handleKernelPublishedAsync({\n  projectRoot,\n  user,\n  exp,\n  url,\n}: {\n  projectRoot: string;\n  user: User;\n  exp: ExpoAppManifest;\n  url: string;\n}) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel?.androidManifestPath) {\n    const manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel?.iosManifestPath) {\n    const manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n"],"file":"../../project/publishAsync.js","sourceRoot":"/xdl@59.0.27/src"}